/**
 * Assignment 13 - Recursive Solutions:
 * 
 * Method number 1 ("longestPalindrome"):
 * Recursively calculates the length of the longest palindromic subsequence in the given array.
 * A nearly-palindromic sequence can be made palindromic by removing at most one element.
 * 
 * @param arr The input array of integers.
 * @return The length of the longest palindromic subsequence in the array.
 * 
 * Method number 2 ("extreme"):
 * Recursively explores all possible paths from the top-left corner (0, 0) to the bottom-right corner (m.length-1, m.length-1) of a square matrix.
 * The goal is to find the smallest of the maximum values encountered along all the paths,
 * keeping track of the largest value encountered along each path.
 * 
 * @param m The input 2D array (matrix) of positive integers.
 * @return The smallest of the maximum values encountered along all possible paths.
 * 
 * @version 21.12.2024, by Maya Katan
 */
public class Ex13{
    //Question number 1 - 50%
    /**
     * This method finds the length of the longest nearly-palindromic subsequence in a given array.
     * A nearly-palindromic subsequence is one where removing at most one element results in a palindrome.
     *
     * @param arr An array of integers.
     * @return The length of the longest nearly-palindromic subsequence in the array.
     */
    public static int longestNearlyPal(int[] arr) {
        return longestNearlyPal(arr, 0, arr.length - 1, 0, false);
    }
    /**
     * This recursive helper method explores the longest nearly-palindromic subsequence by comparing elements 
     * from the start and end of the array and deciding whether to skip one element or not.
     *
     * @param arr - An array of integers.
     * @param leftIndex - The current left index in the array.
     * @param rightIndex - The current right index in the array.
     * @param length - The current length of the nearly-palindromic subsequence.
     * @param skipped - A boolean indicating whether an element has been skipped already.
     * @return The length of the longest nearly-palindromic subsequence found.
     */
    private static int longestNearlyPal(int[] arr, int leftIndex, int rightIndex, int length, boolean skipped) {
        if (leftIndex > rightIndex) { //If leftIndex exceeds rightIndex, return the current length
            return length;  
        }
        if (leftIndex == rightIndex) { //If leftIndex equals rightIndex, we have reached the middle, so return length + 1
            return length + 1; 
        }
        if (arr[leftIndex] == arr[rightIndex]) {  //If the current elements match, we move inward and increase the length by 2
            return longestNearlyPal(arr, leftIndex + 1, rightIndex - 1, length + 2, skipped);
        }
        if (!skipped) { //Try skipping the left or the right element and move inward
            int skipLeft = longestNearlyPal(arr, leftIndex + 1, rightIndex, length + 1, true);
            int skipRight = longestNearlyPal(arr, leftIndex, rightIndex - 1, length + 1, true);
            return Math.max(skipLeft, skipRight); 
        }
        return Math.max(longestNearlyPal(arr, leftIndex + 1, rightIndex, length, skipped),longestNearlyPal(arr, leftIndex, rightIndex - 1, length, skipped));       
    }
    //Question number 2 - 50%
    /**
     * This recursive method explores all possible paths from the current position (i, j) to the bottom-right corner of the matrix,
     * tracking the largest value encountered along each path. The goal is to find the smallest value among all of these maximum values.
     *
     * @param m A square matrix (2D array) of positive integers.
     * @return The smallest of the maximum values encountered along all possible paths from the top-left (0, 0) to the bottom-right (m.length-1, m.length-1).
     */
    public static int extreme(int [][] m){
        return extreme(m, 0, 0, Integer.MIN_VALUE);
    }
    /**
     * This recursive method explores all possible paths from the current position (i, j) to the bottom-right corner of the matrix,
     * keeping track of the largest value encountered along the way.
     * The goal is to find the minimum of all the maximum values along the paths.
     *
     * @param m - A square matrix (2D array) of positive integers.
     * @param i - The current row index in the matrix.
     * @param j - The current column index in the matrix.
     * @param currentMax - The largest value encountered on the current path up to this point.
     * @return The smallest of the maximum values encountered along all possible paths.
     */
    private static int extreme(int[][] m, int i, int j, int currentMax){
        if (i == m.length - 1 && j == m.length - 1) {
            return Math.max(currentMax, m[i][j]);
        }
        int temp = m[i][j];  //Save the current value
        m[i][j] = 0;  //Marking the cell we visited by changing it to 0
        currentMax = Math.max(currentMax, temp);
        int minMax = Integer.MAX_VALUE;
        if (i + 1 < m.length && m[i + 1][j] != 0) { //Move down if possible and the cell isn't visited yet
            minMax = Math.min(minMax, extreme(m, i + 1, j, currentMax));
        }
        if (j + 1 < m.length && m[i][j + 1] != 0) { //Move right if possible and the cell isn't visited yet
            minMax = Math.min(minMax, extreme(m, i, j + 1, currentMax));
        }
        if (i - 1 >= 0 && m[i - 1][j] != 0) { //Move up if possible and the cell isn't visited yet
            minMax = Math.min(minMax, extreme(m, i - 1, j, currentMax));
        }
        if (j - 1 >= 0 && m[i][j - 1] != 0) { //Move left if possible and the cell isn't visited yet
            minMax = Math.min(minMax, extreme(m, i, j - 1, currentMax));
        }
        m[i][j] = temp; //Return the previous value to a cell
        return minMax;
    }
    }//End of class Ex13.
    
